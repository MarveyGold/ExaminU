[
  {
    "title": "COS202",
    "id": 1,
    "instruction": "Choose the correct answer about Java I/O streams.",
    "question": "Which type of stream handles binary data like images and videos?",
    "optionA": "Character Streams",
    "optionB": "Byte Streams",
    "optionC": "Text Streams",
    "optionD": "Binary Streams",
    "correctAnswer": "Byte Streams"
  },
  {
    "title": "COS202",
    "id": 2,
    "instruction": "Select the most appropriate answer about Java I/O.",
    "question": "What is the primary purpose of buffered I/O in Java?",
    "optionA": "To handle character encoding",
    "optionB": "To improve performance by reducing system calls",
    "optionC": "To convert between byte and character streams",
    "optionD": "To handle binary data",
    "correctAnswer": "To improve performance by reducing system calls"
  },
  {
    "title": "COS202",
    "id": 3,
    "instruction": "Choose the correct class hierarchy relationship.",
    "question": "Which class is used for reading character files?",
    "optionA": "FileInputStream",
    "optionB": "FileReader",
    "optionC": "BufferedReader",
    "optionD": "InputStreamReader",
    "correctAnswer": "FileReader"
  },
  {
    "title": "COS202",
    "id": 4,
    "instruction": "Select the correct statement about exception handling.",
    "question": "Which of the following is a checked exception?",
    "optionA": "NullPointerException",
    "optionB": "ArrayIndexOutOfBoundsException",
    "optionC": "IOException",
    "optionD": "IllegalArgumentException",
    "correctAnswer": "IOException"
  },
  {
    "title": "COS202",
    "id": 5,
    "instruction": "Choose the correct inheritance concept.",
    "question": "What keyword is used to inherit from a superclass in Java?",
    "optionA": "implements",
    "optionB": "extends",
    "optionC": "inherits",
    "optionD": "super",
    "correctAnswer": "extends"
  },
  {
    "title": "COS202",
    "id": 6,
    "instruction": "Select the correct answer about Java I/O.",
    "question": "Which method is used to force write any buffered data to a file?",
    "optionA": "close()",
    "optionB": "write()",
    "optionC": "flush()",
    "optionD": "send()",
    "correctAnswer": "flush()"
  },
  {
    "title": "COS202",
    "id": 7,
    "instruction": "Choose the correct exception type.",
    "question": "Which of the following exceptions is unchecked?",
    "optionA": "IOException",
    "optionB": "SQLException",
    "optionC": "NullPointerException",
    "optionD": "ClassNotFoundException",
    "correctAnswer": "NullPointerException"
  },
  {
    "title": "COS202",
    "id": 8,
    "instruction": "Select the correct inheritance concept.",
    "question": "What does the 'super' keyword refer to in a subclass?",
    "optionA": "The current class",
    "optionB": "The immediate superclass",
    "optionC": "The root Object class",
    "optionD": "Any parent class",
    "correctAnswer": "The immediate superclass"
  },
  {
    "title": "COS202",
    "id": 9,
    "instruction": "Choose the correct stream type.",
    "question": "Character streams process data in units of:",
    "optionA": "8 bits at a time",
    "optionB": "16 bits at a time",
    "optionC": "32 bits at a time",
    "optionD": "64 bits at a time",
    "correctAnswer": "16 bits at a time"
  },
  {
    "title": "COS202",
    "id": 10,
    "instruction": "Select the correct file operation concept.",
    "question": "What is the return value of FileReader.read() when end of file is reached?",
    "optionA": "0",
    "optionB": "-1",
    "optionC": "null",
    "optionD": "EOF",
    "correctAnswer": "-1"
  },
  {
    "title": "COS202",
    "id": 11,
    "instruction": "Choose the correct inheritance type.",
    "question": "Which type of inheritance does Java support with classes?",
    "optionA": "Multiple inheritance",
    "optionB": "Single inheritance",
    "optionC": "Both single and multiple",
    "optionD": "No inheritance",
    "correctAnswer": "Single inheritance"
  },
  {
    "title": "COS202",
    "id": 12,
    "instruction": "Select the correct exception handling concept.",
    "question": "What block is used to handle exceptions in Java?",
    "optionA": "try-handle",
    "optionB": "try-catch",
    "optionC": "exception-handle",
    "optionD": "error-catch",
    "correctAnswer": "try-catch"
  },
  {
    "title": "COS202",
    "id": 13,
    "instruction": "Choose the correct I/O class.",
    "question": "Which class is used for reading text files line by line?",
    "optionA": "FileReader",
    "optionB": "BufferedReader",
    "optionC": "FileInputStream",
    "optionD": "Scanner",
    "correctAnswer": "BufferedReader"
  },
  {
    "title": "COS202",
    "id": 14,
    "instruction": "Select the correct inheritance advantage.",
    "question": "What is a primary advantage of inheritance?",
    "optionA": "Faster execution",
    "optionB": "Code reusability",
    "optionC": "Smaller file size",
    "optionD": "Automatic memory management",
    "correctAnswer": "Code reusability"
  },
  {
    "title": "COS202",
    "id": 15,
    "instruction": "Choose the correct stream hierarchy.",
    "question": "Which abstract class is the parent of all character input streams?",
    "optionA": "InputStream",
    "optionB": "Reader",
    "optionC": "FileReader",
    "optionD": "BufferedReader",
    "correctAnswer": "Reader"
  },
  {
    "title": "COS202",
    "id": 16,
    "instruction": "Select the correct exception category.",
    "question": "Which of these is an Error (not an Exception)?",
    "optionA": "IOException",
    "optionB": "NullPointerException",
    "optionC": "OutOfMemoryError",
    "optionD": "IllegalArgumentException",
    "correctAnswer": "OutOfMemoryError"
  },
  {
    "title": "COS202",
    "id": 17,
    "instruction": "Choose the correct inheritance type.",
    "question": "When class B extends class A, and class C extends class B, this is called:",
    "optionA": "Single inheritance",
    "optionB": "Multiple inheritance",
    "optionC": "Multilevel inheritance",
    "optionD": "Hierarchical inheritance",
    "correctAnswer": "Multilevel inheritance"
  },
  {
    "title": "COS202",
    "id": 18,
    "instruction": "Select the correct I/O operation.",
    "question": "What does BufferedReader.readLine() return when end of file is reached?",
    "optionA": "-1",
    "optionB": "0",
    "optionC": "null",
    "optionD": "EOF",
    "correctAnswer": "null"
  },
  {
    "title": "COS202",
    "id": 19,
    "instruction": "Choose the correct exception concept.",
    "question": "Which package contains Java's exception classes?",
    "optionA": "java.util",
    "optionB": "java.lang",
    "optionC": "java.io",
    "optionD": "java.exception",
    "correctAnswer": "java.lang"
  },
  {
    "title": "COS202",
    "id": 20,
    "instruction": "Select the correct inheritance usage.",
    "question": "What keyword is used to call a superclass constructor?",
    "optionA": "this",
    "optionB": "super",
    "optionC": "extends",
    "optionD": "parent",
    "correctAnswer": "super"
  },
  {
    "title": "COS202",
    "id": 21,
    "instruction": "Choose the correct stream type.",
    "question": "Byte streams process data in units of:",
    "optionA": "8 bits at a time",
    "optionB": "16 bits at a time",
    "optionC": "32 bits at a time",
    "optionD": "64 bits at a time",
    "correctAnswer": "8 bits at a time"
  },
  {
    "title": "COS202",
    "id": 22,
    "instruction": "Select the correct file writing concept.",
    "question": "Which class is typically used with BufferedWriter for file output?",
    "optionA": "FileReader",
    "optionB": "FileWriter",
    "optionC": "FileOutputStream",
    "optionD": "PrintWriter",
    "correctAnswer": "FileWriter"
  },
  {
    "title": "COS202",
    "id": 23,
    "instruction": "Choose the correct exception hierarchy.",
    "question": "What is the parent class of all exceptions and errors?",
    "optionA": "Exception",
    "optionB": "Error",
    "optionC": "Throwable",
    "optionD": "RuntimeException",
    "correctAnswer": "Throwable"
  },
  {
    "title": "COS202",
    "id": 24,
    "instruction": "Select the correct inheritance type.",
    "question": "When multiple classes inherit from a single superclass, this is called:",
    "optionA": "Single inheritance",
    "optionB": "Multiple inheritance",
    "optionC": "Multilevel inheritance",
    "optionD": "Hierarchical inheritance",
    "correctAnswer": "Hierarchical inheritance"
  },
  {
    "title": "COS202",
    "id": 25,
    "instruction": "Choose the correct I/O concept.",
    "question": "What is the purpose of the try-with-resources statement?",
    "optionA": "To handle multiple exceptions",
    "optionB": "To automatically close resources",
    "optionC": "To improve performance",
    "optionD": "To convert between stream types",
    "correctAnswer": "To automatically close resources"
  },
  {
    "title": "COS202",
    "id": 26,
    "instruction": "Select the correct exception type.",
    "question": "Which of these is a RuntimeException?",
    "optionA": "IOException",
    "optionB": "SQLException",
    "optionC": "ClassNotFoundException",
    "optionD": "ArrayIndexOutOfBoundsException",
    "correctAnswer": "ArrayIndexOutOfBoundsException"
  },
  {
    "title": "COS202",
    "id": 27,
    "instruction": "Choose the correct inheritance concept.",
    "question": "How does Java achieve multiple inheritance?",
    "optionA": "Using abstract classes",
    "optionB": "Using interfaces",
    "optionC": "Using final classes",
    "optionD": "Using static classes",
    "correctAnswer": "Using interfaces"
  },
  {
    "title": "COS202",
    "id": 28,
    "instruction": "Select the correct stream class.",
    "question": "Which class is used to convert byte streams to character streams?",
    "optionA": "FileReader",
    "optionB": "FileWriter",
    "optionC": "InputStreamReader",
    "optionD": "OutputStreamWriter",
    "correctAnswer": "InputStreamReader"
  },
  {
    "title": "COS202",
    "id": 29,
    "instruction": "Choose the correct exception handling practice.",
    "question": "What should always be done with I/O resources after use?",
    "optionA": "They should be flushed",
    "optionB": "They should be closed",
    "optionC": "They should be nullified",
    "optionD": "They should be serialized",
    "correctAnswer": "They should be closed"
  },
  {
    "title": "COS202",
    "id": 30,
    "instruction": "Select the correct inheritance usage.",
    "question": "What annotation indicates a method is overriding a superclass method?",
    "optionA": "@Override",
    "optionB": "@Overwrite",
    "optionC": "@Inherit",
    "optionD": "@Super",
    "correctAnswer": "@Override"
  },
  {
    "title": "COS202",
    "id": 31,
    "instruction": "Choose the correct I/O class relationship.",
    "question": "BufferedReader is a subclass of:",
    "optionA": "Reader",
    "optionB": "FileReader",
    "optionC": "InputStream",
    "optionD": "BufferedStream",
    "correctAnswer": "Reader"
  },
  {
    "title": "COS202",
    "id": 32,
    "instruction": "Select the correct exception concept.",
    "question": "Which exceptions must be caught or declared in the method signature?",
    "optionA": "Runtime exceptions",
    "optionB": "Checked exceptions",
    "optionC": "Errors",
    "optionD": "All exceptions",
    "correctAnswer": "Checked exceptions"
  },
  {
    "title": "COS202",
    "id": 33,
    "instruction": "Choose the correct inheritance example.",
    "question": "Which keyword is used to implement an interface?",
    "optionA": "extends",
    "optionB": "implements",
    "optionC": "inherits",
    "optionD": "interface",
    "correctAnswer": "implements"
  },
  {
    "title": "COS202",
    "id": 34,
    "instruction": "Select the correct file reading method.",
    "question": "Which method reads an entire line from a file using BufferedReader?",
    "optionA": "read()",
    "optionB": "readLine()",
    "optionC": "nextLine()",
    "optionD": "getLine()",
    "correctAnswer": "readLine()"
  },
  {
    "title": "COS202",
    "id": 35,
    "instruction": "Choose the correct exception type.",
    "question": "NumberFormatException is a subclass of:",
    "optionA": "IOException",
    "optionB": "RuntimeException",
    "optionC": "Error",
    "optionD": "CheckedException",
    "correctAnswer": "RuntimeException"
  },
  {
    "title": "COS202",
    "id": 36,
    "instruction": "Select the correct inheritance advantage.",
    "question": "Which is NOT an advantage of inheritance?",
    "optionA": "Code reusability",
    "optionB": "Extensibility",
    "optionC": "Faster execution",
    "optionD": "Logical hierarchy",
    "correctAnswer": "Faster execution"
  },
  {
    "title": "COS202",
    "id": 37,
    "instruction": "Choose the correct stream purpose.",
    "question": "What type of data do character streams handle?",
    "optionA": "Binary data",
    "optionB": "Text data",
    "optionC": "Serialized objects",
    "optionD": "Network data",
    "correctAnswer": "Text data"
  },
  {
    "title": "COS202",
    "id": 38,
    "instruction": "Select the correct exception handling block.",
    "question": "Which block is always executed regardless of whether an exception occurs?",
    "optionA": "try",
    "optionB": "catch",
    "optionC": "finally",
    "optionD": "throw",
    "correctAnswer": "finally"
  },
  {
    "title": "COS202",
    "id": 39,
    "instruction": "Choose the correct inheritance type.",
    "question": "When a class implements multiple interfaces, this is an example of:",
    "optionA": "Single inheritance",
    "optionB": "Multiple inheritance",
    "optionC": "Multilevel inheritance",
    "optionD": "Hierarchical inheritance",
    "correctAnswer": "Multiple inheritance"
  },
  {
    "title": "COS202",
    "id": 40,
    "instruction": "Select the correct I/O operation.",
    "question": "What happens if you don't close a FileWriter?",
    "optionA": "Data is automatically saved",
    "optionB": "Data may not be written completely",
    "optionC": "The file is deleted",
    "optionD": "An exception is thrown immediately",
    "correctAnswer": "Data may not be written completely"
  },
  {
    "title": "COS202",
    "id": 41,
    "instruction": "Choose the correct exception concept.",
    "question": "What is the parent class of IOException?",
    "optionA": "RuntimeException",
    "optionB": "Exception",
    "optionC": "Error",
    "optionD": "Throwable",
    "correctAnswer": "Exception"
  },
  {
    "title": "COS202",
    "id": 42,
    "instruction": "Select the correct inheritance usage.",
    "question": "What can the 'super' keyword access in a subclass?",
    "optionA": "Only private members",
    "optionB": "Only public members",
    "optionC": "Only protected members",
    "optionD": "Protected and public members",
    "correctAnswer": "Protected and public members"
  },
  {
    "title": "COS202",
    "id": 43,
    "instruction": "Choose the correct stream class.",
    "question": "Which class is used for writing binary data to files?",
    "optionA": "FileWriter",
    "optionB": "FileOutputStream",
    "optionC": "BufferedWriter",
    "optionD": "PrintWriter",
    "correctAnswer": "FileOutputStream"
  },
  {
    "title": "COS202",
    "id": 44,
    "instruction": "Select the correct exception handling.",
    "question": "Which exception is thrown when trying to access a null object reference?",
    "optionA": "ArrayIndexOutOfBoundsException",
    "optionB": "NullPointerException",
    "optionC": "IllegalArgumentException",
    "optionD": "ClassCastException",
    "correctAnswer": "NullPointerException"
  },
  {
    "title": "COS202",
    "id": 45,
    "instruction": "Choose the correct inheritance concept.",
    "question": "What is method overriding?",
    "optionA": "Creating a new method with same name",
    "optionB": "Providing a different implementation of a superclass method",
    "optionC": "Hiding a superclass method",
    "optionD": "Deleting a superclass method",
    "correctAnswer": "Providing a different implementation of a superclass method"
  },
  {
    "title": "COS202",
    "id": 46,
    "instruction": "Select the correct I/O performance concept.",
    "question": "Why is buffered I/O more efficient?",
    "optionA": "It uses less memory",
    "optionB": "It reduces system calls",
    "optionC": "It compresses data",
    "optionD": "It encrypts data",
    "correctAnswer": "It reduces system calls"
  },
  {
    "title": "COS202",
    "id": 47,
    "instruction": "Choose the correct exception category.",
    "question": "VirtualMachineError is a subclass of:",
    "optionA": "Exception",
    "optionB": "Error",
    "optionC": "RuntimeException",
    "optionD": "Throwable",
    "correctAnswer": "Error"
  },
  {
    "title": "COS202",
    "id": 48,
    "instruction": "Select the correct inheritance type.",
    "question": "What is hybrid inheritance?",
    "optionA": "A combination of multiple inheritance types",
    "optionB": "Inheritance from hybrid classes",
    "optionC": "Inheritance using both classes and interfaces",
    "optionD": "Inheritance with multiple superclasses",
    "correctAnswer": "A combination of multiple inheritance types"
  },
  {
    "title": "COS202",
    "id": 49,
    "instruction": "Choose the correct file operation.",
    "question": "What does FileWriter.write() method do?",
    "optionA": "Reads from a file",
    "optionB": "Writes to a file",
    "optionC": "Creates a new file",
    "optionD": "Deletes a file",
    "correctAnswer": "Writes to a file"
  },
  {
    "title": "COS202",
    "id": 50,
    "instruction": "Select the correct exception handling practice.",
    "question": "What is the purpose of the catch block?",
    "optionA": "To try risky code",
    "optionB": "To handle exceptions",
    "optionC": "To clean up resources",
    "optionD": "To throw exceptions",
    "correctAnswer": "To handle exceptions"
  },
  {
    "title": "COS202",
    "id": 51,
    "instruction": "Choose the correct inheritance concept.",
    "question": "What is the root class of all Java classes?",
    "optionA": "Class",
    "optionB": "Object",
    "optionC": "Root",
    "optionD": "Super",
    "correctAnswer": "Object"
  },
  {
    "title": "COS202",
    "id": 52,
    "instruction": "Select the correct stream type.",
    "question": "Which stream classes are abstract?",
    "optionA": "InputStream and OutputStream",
    "optionB": "FileInputStream and FileOutputStream",
    "optionC": "BufferedReader and BufferedWriter",
    "optionD": "FileReader and FileWriter",
    "correctAnswer": "InputStream and OutputStream"
  },
  {
    "title": "COS202",
    "id": 53,
    "instruction": "Choose the correct exception type.",
    "question": "Which exception occurs when converting an invalid string to a number?",
    "optionA": "IllegalArgumentException",
    "optionB": "NumberFormatException",
    "optionC": "ParseException",
    "optionD": "ConversionException",
    "correctAnswer": "NumberFormatException"
  },
  {
    "title": "COS202",
    "id": 54,
    "instruction": "Select the correct inheritance usage.",
    "question": "What is the purpose of the 'extends' keyword?",
    "optionA": "To implement an interface",
    "optionB": "To inherit from a class",
    "optionC": "To include a package",
    "optionD": "To import a class",
    "correctAnswer": "To inherit from a class"
  },
  {
    "title": "COS202",
    "id": 55,
    "instruction": "Choose the correct I/O concept.",
    "question": "What is a stream in Java I/O?",
    "optionA": "A sequence of data elements",
    "optionB": "A file object",
    "optionC": "A network connection",
    "optionD": "A memory buffer",
    "correctAnswer": "A sequence of data elements"
  },
  {
    "title": "COS202",
    "id": 56,
    "instruction": "Select the correct exception hierarchy.",
    "question": "Which class is at the top of the exception hierarchy?",
    "optionA": "Error",
    "optionB": "Exception",
    "optionC": "Throwable",
    "optionD": "RuntimeException",
    "correctAnswer": "Throwable"
  },
  {
    "title": "COS202",
    "id": 57,
    "instruction": "Choose the correct inheritance advantage.",
    "question": "How does inheritance help with extensibility?",
    "optionA": "By making code run faster",
    "optionB": "By allowing new functionality without modifying superclass",
    "optionC": "By reducing memory usage",
    "optionD": "By automatically handling exceptions",
    "correctAnswer": "By allowing new functionality without modifying superclass"
  },
  {
    "title": "COS202",
    "id": 58,
    "instruction": "Select the correct file reading approach.",
    "question": "Which is more efficient for reading large text files?",
    "optionA": "FileReader alone",
    "optionB": "BufferedReader with FileReader",
    "optionC": "FileInputStream",
    "optionD": "Scanner",
    "correctAnswer": "BufferedReader with FileReader"
  },
  {
    "title": "COS202",
    "id": 59,
    "instruction": "Choose the correct exception handling.",
    "question": "What is StackOverflowError?",
    "optionA": "A checked exception",
    "optionB": "A runtime exception",
    "optionC": "An error",
    "optionD": "A compile-time error",
    "correctAnswer": "An error"
  },
  {
    "title": "COS202",
    "id": 60,
    "instruction": "Select the correct inheritance concept.",
    "question": "What is the relationship called when class Dog extends class Animal?",
    "optionA": "Dog is a superclass of Animal",
    "optionB": "Dog is a subclass of Animal",
    "optionC": "Dog implements Animal",
    "optionD": "Dog uses Animal",
    "correctAnswer": "Dog is a subclass of Animal"
  },
  {
    "title": "COS202",
    "id": 61,
    "instruction": "Choose the correct I/O class.",
    "question": "Which class is used for reading binary files?",
    "optionA": "FileReader",
    "optionB": "FileInputStream",
    "optionC": "BufferedReader",
    "optionD": "InputStreamReader",
    "correctAnswer": "FileInputStream"
  },
  {
    "title": "COS202",
    "id": 62,
    "instruction": "Select the correct exception type.",
    "question": "ClassNotFoundException is a:",
    "optionA": "Runtime exception",
    "optionB": "Checked exception",
    "optionC": "Error",
    "optionD": "Warning",
    "correctAnswer": "Checked exception"
  },
  {
    "title": "COS202",
    "id": 63,
    "instruction": "Choose the correct inheritance example.",
    "question": "In multilevel inheritance, how many superclasses does a class have?",
    "optionA": "One immediate superclass",
    "optionB": "Multiple superclasses",
    "optionC": "No superclasses",
    "optionD": "All classes in hierarchy",
    "correctAnswer": "One immediate superclass"
  },
  {
    "title": "COS202",
    "id": 64,
    "instruction": "Select the correct file writing practice.",
    "question": "Why is it important to call flush() on a BufferedWriter?",
    "optionA": "To close the file",
    "optionB": "To ensure all data is written to file",
    "optionC": "To read the file",
    "optionD": "To delete the file",
    "correctAnswer": "To ensure all data is written to file"
  },
  {
    "title": "COS202",
    "id": 65,
    "instruction": "Choose the correct exception concept.",
    "question": "What is the difference between Error and Exception?",
    "optionA": "Errors are recoverable, exceptions are not",
    "optionB": "Exceptions are recoverable, errors are usually not",
    "optionC": "There is no difference",
    "optionD": "Errors are checked, exceptions are unchecked",
    "correctAnswer": "Exceptions are recoverable, errors are usually not"
  },
  {
    "title": "COS202",
    "id": 66,
    "instruction": "Select the correct inheritance type.",
    "question": "What type of inheritance is not supported by Java classes?",
    "optionA": "Single inheritance",
    "optionB": "Multiple inheritance",
    "optionC": "Multilevel inheritance",
    "optionD": "Hierarchical inheritance",
    "correctAnswer": "Multiple inheritance"
  },
  {
    "title": "COS202",
    "id": 67,
    "instruction": "Choose the correct stream purpose.",
    "question": "What do OutputStream classes handle?",
    "optionA": "Reading data",
    "optionB": "Writing data",
    "optionC": "Both reading and writing",
    "optionD": "Data conversion",
    "correctAnswer": "Writing data"
  },
  {
    "title": "COS202",
    "id": 68,
    "instruction": "Select the correct exception handling.",
    "question": "What happens if an exception is not caught?",
    "optionA": "The program continues normally",
    "optionB": "The program terminates abruptly",
    "optionC": "The exception is ignored",
    "optionD": "The exception is logged automatically",
    "correctAnswer": "The program terminates abruptly"
  },
  {
    "title": "COS202",
    "id": 69,
    "instruction": "Choose the correct inheritance usage.",
    "question": "What can be inherited from a superclass?",
    "optionA": "Only public methods",
    "optionB": "Only protected methods",
    "optionC": "Public and protected members",
    "optionD": "All members including private",
    "correctAnswer": "Public and protected members"
  },
  {
    "title": "COS202",
    "id": 70,
    "instruction": "Select the correct I/O operation.",
    "question": "What is the purpose of FileWriter constructor?",
    "optionA": "To read a file",
    "optionB": "To create or overwrite a file for writing",
    "optionC": "To delete a file",
    "optionD": "To rename a file",
    "correctAnswer": "To create or overwrite a file for writing"
  },
  {
    "title": "COS202",
    "id": 71,
    "instruction": "Choose the correct exception type.",
    "question": "IllegalArgumentException is a:",
    "optionA": "Checked exception",
    "optionB": "Runtime exception",
    "optionC": "Error",
    "optionD": "Compile-time error",
    "correctAnswer": "Runtime exception"
  },
  {
    "title": "COS202",
    "id": 72,
    "instruction": "Select the correct inheritance concept.",
    "question": "What is the main purpose of method overriding?",
    "optionA": "To hide the superclass method",
    "optionB": "To provide specific implementation",
    "optionC": "To improve performance",
    "optionD": "To reduce code size",
    "correctAnswer": "To provide specific implementation"
  },
  {
    "title": "COS202",
    "id": 73,
    "instruction": "Choose the correct stream class.",
    "question": "Which class wraps a FileReader to provide buffering?",
    "optionA": "BufferedReader",
    "optionB": "FileInputStream",
    "optionC": "InputStreamReader",
    "optionD": "BufferedFileReader",
    "correctAnswer": "BufferedReader"
  },
  {
    "title": "COS202",
    "id": 74,
    "instruction": "Select the correct exception handling practice.",
    "question": "What is the try-with-resources statement?",
    "optionA": "A way to handle multiple exceptions",
    "optionB": "Automatic resource management",
    "optionC": "A type of stream",
    "optionD": "A file operation",
    "correctAnswer": "Automatic resource management"
  },
  {
    "title": "COS202",
    "id": 75,
    "instruction": "Choose the correct inheritance example.",
    "question": "In hierarchical inheritance, how many subclasses can a superclass have?",
    "optionA": "Only one",
    "optionB": "Exactly two",
    "optionC": "Multiple",
    "optionD": "None",
    "correctAnswer": "Multiple"
  },
  {
    "title": "COS202",
    "id": 76,
    "instruction": "Select the correct file operation.",
    "question": "What does the FileReader.read() method return?",
    "optionA": "A string",
    "optionB": "A character as integer",
    "optionC": "A byte",
    "optionD": "A line",
    "correctAnswer": "A character as integer"
  },
  {
    "title": "COS202",
    "id": 77,
    "instruction": "Choose the correct exception concept.",
    "question": "What is a runtime exception?",
    "optionA": "An exception that must be caught",
    "optionB": "An exception that occurs at runtime and doesn't need to be declared",
    "optionC": "An error in the code",
    "optionD": "A compile-time error",
    "correctAnswer": "An exception that occurs at runtime and doesn't need to be declared"
  },
  {
    "title": "COS202",
    "id": 78,
    "instruction": "Select the correct inheritance advantage.",
    "question": "How does inheritance establish hierarchy?",
    "optionA": "By organizing classes in a tree structure",
    "optionB": "By making all classes equal",
    "optionC": "By reducing code duplication",
    "optionD": "By improving performance",
    "correctAnswer": "By organizing classes in a tree structure"
  },
  {
    "title": "COS202",
    "id": 79,
    "instruction": "Choose the correct I/O performance concept.",
    "question": "Why are buffered streams faster?",
    "optionA": "They use less memory",
    "optionB": "They reduce I/O operations by reading/writing in chunks",
    "optionC": "They compress data",
    "optionD": "They use multiple threads",
    "correctAnswer": "They reduce I/O operations by reading/writing in chunks"
  },
  {
    "title": "COS202",
    "id": 80,
    "instruction": "Select the correct exception type.",
    "question": "ParseException is a:",
    "optionA": "Runtime exception",
    "optionB": "Checked exception",
    "optionC": "Error",
    "optionD": "Warning",
    "correctAnswer": "Checked exception"
  },
  {
    "title": "COS202",
    "id": 81,
    "instruction": "Choose the correct inheritance concept.",
    "question": "What is the relationship between superclass and subclass?",
    "optionA": "Subclass is a type of superclass",
    "optionB": "Superclass is a type of subclass",
    "optionC": "They are unrelated",
    "optionD": "They are the same",
    "correctAnswer": "Subclass is a type of superclass"
  },
  {
    "title": "COS202",
    "id": 82,
    "instruction": "Select the correct stream usage.",
    "question": "When should you use character streams instead of byte streams?",
    "optionA": "For binary files",
    "optionB": "For text files with character encoding",
    "optionC": "For network communication",
    "optionD": "For object serialization",
    "correctAnswer": "For text files with character encoding"
  },
  {
    "title": "COS202",
    "id": 83,
    "instruction": "Choose the correct exception handling.",
    "question": "What is the purpose of the throw keyword?",
    "optionA": "To catch exceptions",
    "optionB": "To declare exceptions",
    "optionC": "To explicitly throw an exception",
    "optionD": "To ignore exceptions",
    "correctAnswer": "To explicitly throw an exception"
  },
  {
    "title": "COS202",
    "id": 84,
    "instruction": "Select the correct inheritance example.",
    "question": "What does the 'super' keyword call in a constructor?",
    "optionA": "The current class constructor",
    "optionB": "The superclass constructor",
    "optionC": "Any constructor",
    "optionD": "The main method",
    "correctAnswer": "The superclass constructor"
  },
  {
    "title": "COS202",
    "id": 85,
    "instruction": "Choose the correct file operation.",
    "question": "What is the correct way to handle File I/O exceptions?",
    "optionA": "Ignore them",
    "optionB": "Use try-catch blocks",
    "optionC": "Use if-else statements",
    "optionD": "They don't need handling",
    "correctAnswer": "Use try-catch blocks"
  },
  {
    "title": "COS202",
    "id": 86,
    "instruction": "Select the correct exception hierarchy.",
    "question": "Which is true about the exception hierarchy?",
    "optionA": "Error extends Exception",
    "optionB": "Exception extends Error",
    "optionC": "Both extend Throwable",
    "optionD": "They are unrelated",
    "correctAnswer": "Both extend Throwable"
  },
  {
    "title": "COS202",
    "id": 87,
    "instruction": "Choose the correct inheritance type.",
    "question": "What is the simplest form of inheritance?",
    "optionA": "Multiple inheritance",
    "optionB": "Single inheritance",
    "optionC": "Multilevel inheritance",
    "optionD": "Hierarchical inheritance",
    "correctAnswer": "Single inheritance"
  },
  {
    "title": "COS202",
    "id": 88,
    "instruction": "Select the correct I/O class.",
    "question": "Which class is used for writing character files?",
    "optionA": "FileOutputStream",
    "optionB": "FileWriter",
    "optionC": "BufferedReader",
    "optionD": "InputStream",
    "correctAnswer": "FileWriter"
  },
  {
    "title": "COS202",
    "id": 89,
    "instruction": "Choose the correct exception concept.",
    "question": "What is the difference between checked and unchecked exceptions?",
    "optionA": "Checked exceptions are checked at runtime",
    "optionB": "Checked exceptions must be caught or declared",
    "optionC": "Unchecked exceptions must be caught",
    "optionD": "There is no difference",
    "correctAnswer": "Checked exceptions must be caught or declared"
  },
  {
    "title": "COS202",
    "id": 90,
    "instruction": "Select the correct inheritance usage.",
    "question": "What is method overloading vs method overriding?",
    "optionA": "Overloading is same method name different parameters, overriding is same signature different implementation",
    "optionB": "They are the same",
    "optionC": "Overriding is same method name different parameters",
    "optionD": "Overloading is inheritance-specific",
    "correctAnswer": "Overloading is same method name different parameters, overriding is same signature different implementation"
  },
  {
    "title": "COS202",
    "id": 91,
    "instruction": "Choose the correct stream concept.",
    "question": "What is the purpose of InputStreamReader?",
    "optionA": "To read bytes and convert to characters",
    "optionB": "To read characters directly",
    "optionC": "To write characters",
    "optionD": "To buffer input",
    "correctAnswer": "To read bytes and convert to characters"
  },
  {
    "title": "COS202",
    "id": 92,
    "instruction": "Select the correct exception handling.",
    "question": "When should you use multiple catch blocks?",
    "optionA": "When handling different types of exceptions differently",
    "optionB": "For better performance",
    "optionC": "Always",
    "optionD": "Never",
    "correctAnswer": "When handling different types of exceptions differently"
  },
  {
    "title": "COS202",
    "id": 93,
    "instruction": "Choose the correct inheritance concept.",
    "question": "Can a subclass access private members of its superclass?",
    "optionA": "Yes, directly",
    "optionB": "Yes, through public methods",
    "optionC": "No, never",
    "optionD": "Yes, through the super keyword",
    "correctAnswer": "No, never"
  },
  {
    "title": "COS202",
    "id": 94,
    "instruction": "Select the correct file writing practice.",
    "question": "What is the advantage of using try-with-resources for file operations?",
    "optionA": "Automatic resource closing",
    "optionB": "Better performance",
    "optionC": "Smaller code",
    "optionD": "No exceptions",
    "correctAnswer": "Automatic resource closing"
  },
  {
    "title": "COS202",
    "id": 95,
    "instruction": "Choose the correct exception type.",
    "question": "SQLException is a:",
    "optionA": "Runtime exception",
    "optionB": "Checked exception",
    "optionC": "Error",
    "optionD": "Warning",
    "correctAnswer": "Checked exception"
  },
  {
    "title": "COS202",
    "id": 96,
    "instruction": "Select the correct inheritance example.",
    "question": "What is the correct syntax for class inheritance?",
    "optionA": "class Subclass extends Superclass",
    "optionB": "class Subclass inherits Superclass",
    "optionC": "class Subclass : Superclass",
    "optionD": "class Subclass implements Superclass",
    "correctAnswer": "class Subclass extends Superclass"
  },
  {
    "title": "COS202",
    "id": 97,
    "instruction": "Choose the correct I/O performance.",
    "question": "When is buffering most beneficial?",
    "optionA": "For small files",
    "optionB": "For large files",
    "optionC": "For network streams only",
    "optionD": "For memory operations",
    "correctAnswer": "For large files"
  },
  {
    "title": "COS202",
    "id": 98,
    "instruction": "Select the correct exception handling concept.",
    "question": "What is the purpose of the finally block?",
    "optionA": "To handle exceptions",
    "optionB": "To try risky code",
    "optionC": "To clean up resources regardless of exceptions",
    "optionD": "To throw exceptions",
    "correctAnswer": "To clean up resources regardless of exceptions"
  },
  {
    "title": "COS202",
    "id": 99,
    "instruction": "Choose the correct inheritance advantage.",
    "question": "What does polymorphism enable through inheritance?",
    "optionA": "Faster execution",
    "optionB": "Treating objects of different classes uniformly",
    "optionC": "Smaller memory footprint",
    "optionD": "Automatic garbage collection",
    "correctAnswer": "Treating objects of different classes uniformly"
  },
  {
    "title": "COS202",
    "id": 100,
    "instruction": "Select the correct comprehensive concept.",
    "question": "Which Java feature combines inheritance and exception handling for robust file I/O?",
    "optionA": "Try-with-resources with proper class hierarchy",
    "optionB": "Method overloading",
    "optionC": "Static imports",
    "optionD": "Anonymous classes",
    "correctAnswer": "Try-with-resources with proper class hierarchy"
  }
]